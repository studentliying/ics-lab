#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name: Li Ying
# ID: 516030910444
#
# Describe how and why you modified the baseline code.
# 1. I unroll the loop. Each loop processes eight pieces of data in 
#    order to avoid the stall and bubble because of using mrmovq and 
#    rmmovq at a time.
# 2. After processing eight pieces of data, move the pointer by 64 
#    bytes and minus %rdx by 8 at a time in order to save the time on
#    moving poiter and counting of %rdx.
# 3. If the the value of %rdx is smaller than 8, it will jump to TAIL
#    to process the remaining part. In the process of TAIL, each loop 
#    will process 2 pieces of data. The reason are similar to 1.
# 3. After TAIL, if there is still a remaining piece of data, it will 
#    goto SECTAIL.
# 4. I use iaddq to avoid the stall and bubble because of using rrmovq
#    and addq.
# 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
 ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-8, %rdx
	jl TAIL
      
LOOP:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	andq %r8, %r8		# val <= 0?
	jle	TO2         	# if so, goto TO2:
	iaddq $1, %rax		# count++
TO2:
	andq %r9, %r9		# val <= 0?
	jle	TO3	            # if so, goto TO3:
	iaddq $1, %rax		# count++
TO3:
	andq %r10, %r10		# val <= 0?
	jle	TO4				# if so, goto TO4:
	iaddq $1, %rax		# count++
TO4:
	andq %r11, %r11		# val <= 0?
	jle	TO5				# if so, goto TO5:
	iaddq $1, %rax		# count++
TO5:
	andq %r12, %r12		# val <= 0?
	jle	TO6				# if so, goto TO6:
	iaddq $1, %rax		# count++
TO6:
	andq %r13, %r13		# val <= 0?
	jle	TO7				# if so, goto TO7:
	iaddq $1, %rax		# count++
TO7:
	andq %r14, %r14		# val <= 0?
	jle	TO8				# if so, goto TO8:
	iaddq $1, %rax		# count++
TO8:
	andq %rcx, %rcx		# val <= 0?
	jle	TOEND			# if so, goto TOEND:
	iaddq $1, %rax		# count++
TOEND:
	iaddq $64, %rdi
	iaddq $64, %rsi
    iaddq $-8, %rdx
	jge LOOP

TAIL:
	iaddq $6, %rdx
	jl SECTAIL
	
SECLOOP:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9
	andq %r8, %r8
	jle STO2
	iaddq $1, %rax
STO2:
	rmmovq %r8, (%rsi)
	andq %r9, %r9
	jle STOEND
	iaddq $1, %rax

STOEND:
	rmmovq %r9, 8(%rsi)
	iaddq $16, %rdi
	iaddq $16, %rsi
	iaddq $-2, %rdx
	jge SECLOOP

SECTAIL:
	iaddq $2, %rdx
	jle Done
	mrmovq (%rdi), %r8
	rmmovq %r8, (%rsi)
	andq %r8, %r8
	jle Done
	iaddq $1, %rax
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
