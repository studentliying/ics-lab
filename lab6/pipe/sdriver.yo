                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6b802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name: Li Ying
                            | # ID: 516030910444
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. I unroll the loop. Each loop processes eight pieces of data in 
                            | #    order to avoid the stall and bubble because of using mrmovq and 
                            | #    rmmovq at a time.
                            | # 2. After processing eight pieces of data, move the pointer by 64 
                            | #    bytes and minus %rdx by 8 at a time in order to save the time on
                            | #    moving poiter and counting of %rdx.
                            | # 3. If the the value of %rdx is smaller than 8, it will jump to TAIL
                            | #    to process the remaining part. In the process of TAIL, each loop 
                            | #    will process 2 pieces of data. The reason are similar to 1.
                            | # 3. After TAIL, if there is still a remaining piece of data, it will 
                            | #    goto SECTAIL.
                            | # 4. I use iaddq to avoid the stall and bubble because of using rrmovq
                            | #    and addq.
                            | # 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      |  ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x03c: 72b401000000000000   | 	jl TAIL
                            |       
0x045:                      | LOOP:	
0x045: 50870000000000000000 | 	mrmovq (%rdi), %r8	# read val from src...
0x04f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x059: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x063: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x06d: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x077: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x081: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x08b: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
0x095: 40860000000000000000 | 	rmmovq %r8, (%rsi)	# ...and store it to dst
0x09f: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x0a9: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b3: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0bd: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x0c7: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x0d1: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x0db: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
0x0e5: 6288                 | 	andq %r8, %r8		# val <= 0?
0x0e7: 71fa00000000000000   | 	jle	TO2         	# if so, goto TO2:
0x0f0: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0fa:                      | TO2:
0x0fa: 6299                 | 	andq %r9, %r9		# val <= 0?
0x0fc: 710f01000000000000   | 	jle	TO3	            # if so, goto TO3:
0x105: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x10f:                      | TO3:
0x10f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x111: 712401000000000000   | 	jle	TO4				# if so, goto TO4:
0x11a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x124:                      | TO4:
0x124: 62bb                 | 	andq %r11, %r11		# val <= 0?
0x126: 713901000000000000   | 	jle	TO5				# if so, goto TO5:
0x12f: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x139:                      | TO5:
0x139: 62cc                 | 	andq %r12, %r12		# val <= 0?
0x13b: 714e01000000000000   | 	jle	TO6				# if so, goto TO6:
0x144: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x14e:                      | TO6:
0x14e: 62dd                 | 	andq %r13, %r13		# val <= 0?
0x150: 716301000000000000   | 	jle	TO7				# if so, goto TO7:
0x159: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x163:                      | TO7:
0x163: 62ee                 | 	andq %r14, %r14		# val <= 0?
0x165: 717801000000000000   | 	jle	TO8				# if so, goto TO8:
0x16e: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x178:                      | TO8:
0x178: 6211                 | 	andq %rcx, %rcx		# val <= 0?
0x17a: 718d01000000000000   | 	jle	TOEND			# if so, goto TOEND:
0x183: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x18d:                      | TOEND:
0x18d: c0f74000000000000000 | 	iaddq $64, %rdi
0x197: c0f64000000000000000 | 	iaddq $64, %rsi
0x1a1: c0f2f8ffffffffffffff |     iaddq $-8, %rdx
0x1ab: 754500000000000000   | 	jge LOOP
                            | 
0x1b4:                      | TAIL:
0x1b4: c0f20600000000000000 | 	iaddq $6, %rdx
0x1be: 724002000000000000   | 	jl SECTAIL
                            | 	
0x1c7:                      | SECLOOP:
0x1c7: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x1d1: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x1db: 6288                 | 	andq %r8, %r8
0x1dd: 71f001000000000000   | 	jle STO2
0x1e6: c0f00100000000000000 | 	iaddq $1, %rax
0x1f0:                      | STO2:
0x1f0: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x1fa: 6299                 | 	andq %r9, %r9
0x1fc: 710f02000000000000   | 	jle STOEND
0x205: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x20f:                      | STOEND:
0x20f: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x219: c0f71000000000000000 | 	iaddq $16, %rdi
0x223: c0f61000000000000000 | 	iaddq $16, %rsi
0x22d: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x237: 75c701000000000000   | 	jge SECLOOP
                            | 
0x240:                      | SECTAIL:
0x240: c0f20200000000000000 | 	iaddq $2, %rdx
0x24a: 717c02000000000000   | 	jle Done
0x253: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x25d: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x267: 6288                 | 	andq %r8, %r8
0x269: 717c02000000000000   | 	jle Done
0x272: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x27c:                      | Done:
0x27c: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x27d:                      | End:
                            | #/* $end ncopy-ys */
0x27d:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x280:                      | 	.align 8
0x280:                      | src:
0x280: ffffffffffffffff     | 	.quad -1
0x288: 0200000000000000     | 	.quad 2
0x290: 0300000000000000     | 	.quad 3
0x298: fcffffffffffffff     | 	.quad -4
0x2a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2b0:                      | 	.align 16
0x2b0:                      | Predest:
0x2b0: fadebc0000000000     | 	.quad 0xbcdefa
0x2b8:                      | dest:
0x2b8: abefcd0000000000     | 	.quad 0xcdefab
0x2c0: abefcd0000000000     | 	.quad 0xcdefab
0x2c8: abefcd0000000000     | 	.quad 0xcdefab
0x2d0: abefcd0000000000     | 	.quad 0xcdefab
0x2d8:                      | Postdest:
0x2d8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2e0:                      | .align 8
                            | # Run time stack
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
                            | 
0x360:                      | Stack:
